// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: pb/app.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatServerClient is the client API for ChatServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatServerClient interface {
	// Unary RPC to create a new chat server
	CreateChatServer(ctx context.Context, in *CreateChatServerRequest, opts ...grpc.CallOption) (*CreateChatServerResponse, error)
	// Unary RPC to join a chat server
	JoinChatServer(ctx context.Context, in *JoinChatServerRequest, opts ...grpc.CallOption) (*JoinChatServerResponse, error)
	// Unary RPC to leave a chat server
	LeaveChatServer(ctx context.Context, in *LeaveChatServerRequest, opts ...grpc.CallOption) (*LeaveChatServerResponse, error)
	// Server streaming RPC to list messages in a chat server
	ListMessages(ctx context.Context, in *ListMessagesRequest, opts ...grpc.CallOption) (ChatServer_ListMessagesClient, error)
	// Client Streaming RPC to send messages to a chat server
	SendMessages(ctx context.Context, opts ...grpc.CallOption) (ChatServer_SendMessagesClient, error)
	// Bidirectional streaming RPC to chat in a chat server
	Chat(ctx context.Context, opts ...grpc.CallOption) (ChatServer_ChatClient, error)
}

type chatServerClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServerClient(cc grpc.ClientConnInterface) ChatServerClient {
	return &chatServerClient{cc}
}

func (c *chatServerClient) CreateChatServer(ctx context.Context, in *CreateChatServerRequest, opts ...grpc.CallOption) (*CreateChatServerResponse, error) {
	out := new(CreateChatServerResponse)
	err := c.cc.Invoke(ctx, "/pb.ChatServer/CreateChatServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServerClient) JoinChatServer(ctx context.Context, in *JoinChatServerRequest, opts ...grpc.CallOption) (*JoinChatServerResponse, error) {
	out := new(JoinChatServerResponse)
	err := c.cc.Invoke(ctx, "/pb.ChatServer/JoinChatServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServerClient) LeaveChatServer(ctx context.Context, in *LeaveChatServerRequest, opts ...grpc.CallOption) (*LeaveChatServerResponse, error) {
	out := new(LeaveChatServerResponse)
	err := c.cc.Invoke(ctx, "/pb.ChatServer/LeaveChatServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServerClient) ListMessages(ctx context.Context, in *ListMessagesRequest, opts ...grpc.CallOption) (ChatServer_ListMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatServer_ServiceDesc.Streams[0], "/pb.ChatServer/ListMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServerListMessagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatServer_ListMessagesClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type chatServerListMessagesClient struct {
	grpc.ClientStream
}

func (x *chatServerListMessagesClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatServerClient) SendMessages(ctx context.Context, opts ...grpc.CallOption) (ChatServer_SendMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatServer_ServiceDesc.Streams[1], "/pb.ChatServer/SendMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServerSendMessagesClient{stream}
	return x, nil
}

type ChatServer_SendMessagesClient interface {
	Send(*SendMessageRequest) error
	CloseAndRecv() (*SendMessagesResponse, error)
	grpc.ClientStream
}

type chatServerSendMessagesClient struct {
	grpc.ClientStream
}

func (x *chatServerSendMessagesClient) Send(m *SendMessageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatServerSendMessagesClient) CloseAndRecv() (*SendMessagesResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SendMessagesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatServerClient) Chat(ctx context.Context, opts ...grpc.CallOption) (ChatServer_ChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatServer_ServiceDesc.Streams[2], "/pb.ChatServer/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServerChatClient{stream}
	return x, nil
}

type ChatServer_ChatClient interface {
	Send(*ChatMessage) error
	Recv() (*ChatMessage, error)
	grpc.ClientStream
}

type chatServerChatClient struct {
	grpc.ClientStream
}

func (x *chatServerChatClient) Send(m *ChatMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatServerChatClient) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatServerServer is the server API for ChatServer service.
// All implementations must embed UnimplementedChatServerServer
// for forward compatibility
type ChatServerServer interface {
	// Unary RPC to create a new chat server
	CreateChatServer(context.Context, *CreateChatServerRequest) (*CreateChatServerResponse, error)
	// Unary RPC to join a chat server
	JoinChatServer(context.Context, *JoinChatServerRequest) (*JoinChatServerResponse, error)
	// Unary RPC to leave a chat server
	LeaveChatServer(context.Context, *LeaveChatServerRequest) (*LeaveChatServerResponse, error)
	// Server streaming RPC to list messages in a chat server
	ListMessages(*ListMessagesRequest, ChatServer_ListMessagesServer) error
	// Client Streaming RPC to send messages to a chat server
	SendMessages(ChatServer_SendMessagesServer) error
	// Bidirectional streaming RPC to chat in a chat server
	Chat(ChatServer_ChatServer) error
	mustEmbedUnimplementedChatServerServer()
}

// UnimplementedChatServerServer must be embedded to have forward compatible implementations.
type UnimplementedChatServerServer struct {
}

func (UnimplementedChatServerServer) CreateChatServer(context.Context, *CreateChatServerRequest) (*CreateChatServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChatServer not implemented")
}
func (UnimplementedChatServerServer) JoinChatServer(context.Context, *JoinChatServerRequest) (*JoinChatServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinChatServer not implemented")
}
func (UnimplementedChatServerServer) LeaveChatServer(context.Context, *LeaveChatServerRequest) (*LeaveChatServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveChatServer not implemented")
}
func (UnimplementedChatServerServer) ListMessages(*ListMessagesRequest, ChatServer_ListMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListMessages not implemented")
}
func (UnimplementedChatServerServer) SendMessages(ChatServer_SendMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method SendMessages not implemented")
}
func (UnimplementedChatServerServer) Chat(ChatServer_ChatServer) error {
	return status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedChatServerServer) mustEmbedUnimplementedChatServerServer() {}

// UnsafeChatServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServerServer will
// result in compilation errors.
type UnsafeChatServerServer interface {
	mustEmbedUnimplementedChatServerServer()
}

func RegisterChatServerServer(s grpc.ServiceRegistrar, srv ChatServerServer) {
	s.RegisterService(&ChatServer_ServiceDesc, srv)
}

func _ChatServer_CreateChatServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChatServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServer).CreateChatServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChatServer/CreateChatServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServer).CreateChatServer(ctx, req.(*CreateChatServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatServer_JoinChatServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinChatServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServer).JoinChatServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChatServer/JoinChatServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServer).JoinChatServer(ctx, req.(*JoinChatServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatServer_LeaveChatServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveChatServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServer).LeaveChatServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChatServer/LeaveChatServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServer).LeaveChatServer(ctx, req.(*LeaveChatServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatServer_ListMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListMessagesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServerServer).ListMessages(m, &chatServerListMessagesServer{stream})
}

type ChatServer_ListMessagesServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type chatServerListMessagesServer struct {
	grpc.ServerStream
}

func (x *chatServerListMessagesServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _ChatServer_SendMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServerServer).SendMessages(&chatServerSendMessagesServer{stream})
}

type ChatServer_SendMessagesServer interface {
	SendAndClose(*SendMessagesResponse) error
	Recv() (*SendMessageRequest, error)
	grpc.ServerStream
}

type chatServerSendMessagesServer struct {
	grpc.ServerStream
}

func (x *chatServerSendMessagesServer) SendAndClose(m *SendMessagesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatServerSendMessagesServer) Recv() (*SendMessageRequest, error) {
	m := new(SendMessageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ChatServer_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServerServer).Chat(&chatServerChatServer{stream})
}

type ChatServer_ChatServer interface {
	Send(*ChatMessage) error
	Recv() (*ChatMessage, error)
	grpc.ServerStream
}

type chatServerChatServer struct {
	grpc.ServerStream
}

func (x *chatServerChatServer) Send(m *ChatMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatServerChatServer) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatServer_ServiceDesc is the grpc.ServiceDesc for ChatServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ChatServer",
	HandlerType: (*ChatServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChatServer",
			Handler:    _ChatServer_CreateChatServer_Handler,
		},
		{
			MethodName: "JoinChatServer",
			Handler:    _ChatServer_JoinChatServer_Handler,
		},
		{
			MethodName: "LeaveChatServer",
			Handler:    _ChatServer_LeaveChatServer_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListMessages",
			Handler:       _ChatServer_ListMessages_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SendMessages",
			Handler:       _ChatServer_SendMessages_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Chat",
			Handler:       _ChatServer_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pb/app.proto",
}
